/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package reeldbgui;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFormattedTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.NumberFormatter;


public class reeldbGUI extends javax.swing.JFrame {
    static Connection conn;
    static Object[][] data = {}; //
    static NumberFormatter formatter; 
    /**
     * Creates new form reeldbGUI
     */

    //private static Object[][] movies = new ();
    

    public reeldbGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void  queryTwo(){
                jTextArea1.setVisible(true);
                String userInput = jTextField1.getText();
                if(userInput.isEmpty()) {
                    userInput = "Home Alone 2";
                }
                String[] columnName = {"Movie","Year", "Rating", "RT Picture","IMDB Picture", "Tags"}; //set column names for query 1
                DefaultTableModel model = new DefaultTableModel(data, columnName); //definte the model for this query takes in data object & the col names
                //if query fails, the application won't crash
                try {
                Statement stmt = conn.createStatement();
                String sql = "SELECT DISTINCT movies.title, movies.year, movies.rtAudienceScore, movies.rtPictureURL, movies.imdbPictureURL, "
                        + "GROUP_CONCAT(DISTINCT tags.value SEPARATOR '\n')\n" +
                "FROM reeldb.movies AS movies, reeldb.tags AS tags, reeldb.user_taggedmovies AS tagmovies \n" +
                "WHERE tagmovies.tagID = tags.id AND tagmovies.movieID = movies.id AND movies.title "
                        + "LIKE '%"+userInput+"%' GROUP BY movies.title, movies.year, movies.rtAudienceScore, movies.rtPictureURL, movies.imdbPictureURL;";
                ResultSet rs = stmt.executeQuery(sql); // run the SQL query

                while(rs.next()){
                   //Retrieve by column name
                   String first = rs.getString("movies.title");
                   String second = rs.getString("movies.year");
                   String third = rs.getString("movies.rtAudienceScore");
                   String fourth = rs.getString("movies.rtPictureURL");
                   String fifth = rs.getString("movies.imdbPictureURL");
                   String sixth = rs.getString("GROUP_CONCAT(DISTINCT tags.value SEPARATOR '\n')");

                   model.addRow(new Object[]{first, second, third, fourth, fifth, sixth});// adds the result to a row
                }
                rs.close();
                stmt.close();
                jTable2.setModel(model); //apply the data set

                //listen for clicks on image cells to disply images
                jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    int row = jTable2.rowAtPoint(evt.getPoint());
                    int col = jTable2.columnAtPoint(evt.getPoint());
                    if(col == 5){
                        String tags = (String) jTable2.getModel().getValueAt(row, col);  
                        jTextArea1.setText(tags);
                    } else {
                    try {
                        URL url = new URL((String)jTable2.getModel().getValueAt(row, col));
                        BufferedImage img = ImageIO.read(url);
                        ImageIcon icon = new ImageIcon(img);
                        Image image = icon.getImage(); // transform it 
                        Image newimg = image.getScaledInstance(150, -1,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                        icon = new ImageIcon(newimg);  // transform it back
                        jLabel3.setIcon(icon);
                        jLabel3.setText("");
                    } catch (MalformedURLException ex) {
                        Logger.getLogger(reeldbGUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(reeldbGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
                }
            });
            } catch (SQLException ex) {
                Logger.getLogger(reeldbGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    public void  queryFour(){
                jTextArea1.setVisible(false);
                String userInput = jTextField1.getText();
                if(userInput.isEmpty()) {
                    userInput = "Kubrick";
                }
                String[] columnName = {"Movie","Year", "Rating", "RT Picture","IMDB Picture"}; //set column names for query 1
                DefaultTableModel model = new DefaultTableModel(data, columnName); //definte the model for this query takes in data object & the col names
                //if query fails, the application won't crash
                try {
                Statement stmt = conn.createStatement();
                String sql = "SELECT DISTINCT k.title, k.year, k.rtAudienceScore, k.rtPictureURL, k.imdbPictureURL\n" +
                "FROM(\n" +
                "SELECT m.id, title, year, rtAudienceScore, rtPictureURL, imdbPictureURL, d.movieID\n" +
                "FROM reeldb.movies AS m, reeldb.movie_directors AS d\n" +
                "WHERE m.id = d.movieID AND d.directorName LIKE \"%"+userInput+"%\") AS k";
                ResultSet rs = stmt.executeQuery(sql); // run the SQL query

                while(rs.next()){
                   //Retrieve by column name
                   String first = rs.getString("title");
                   String second = rs.getString("year");
                   String third = rs.getString("rtAudienceScore");
                   String fourth = rs.getString("rtPictureURL");
                   String fifth = rs.getString("imdbPictureURL");
                   model.addRow(new Object[]{first, second, third, fourth, fifth});// adds the result to a row
                }
                rs.close();
                stmt.close();
                jTable2.setModel(model); //apply the data set

                //listen for clicks on image cells to disply images
                jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    int row = jTable2.rowAtPoint(evt.getPoint());
                    int col = jTable2.columnAtPoint(evt.getPoint());
                    try {
                        URL url = new URL((String)jTable2.getModel().getValueAt(row, col));
                        BufferedImage img = ImageIO.read(url);
                        ImageIcon icon = new ImageIcon(img);
                        Image image = icon.getImage(); // transform it 
                        Image newimg = image.getScaledInstance(150, -1,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                        icon = new ImageIcon(newimg);  // transform it back
                        jLabel3.setIcon(icon);
                        jLabel3.setText("");
                    } catch (MalformedURLException ex) {
                        Logger.getLogger(reeldbGUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(reeldbGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            });
            } catch (SQLException ex) {
                Logger.getLogger(reeldbGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    public void  queryFive(){
                jTextArea1.setVisible(false);
                String userInput = jTextField1.getText();
                if(userInput.isEmpty()) {
                    userInput = "Harrison Ford";
                }
                String[] columnName = {"Movie","Year", "Rating", "RT Picture","IMDB Picture"}; //set column names for query 1
                DefaultTableModel model = new DefaultTableModel(data, columnName); //definte the model for this query takes in data object & the col names
                //if query fails, the application won't crash
                try {
                Statement stmt = conn.createStatement();
                String sql = "	SELECT DISTINCT k.title, k.year, k.rtAudienceScore, k.rtPictureURL, k.imdbPictureURL\n" +
                "FROM(\n" +
                "SELECT m.id, title, year, rtAudienceScore, rtPictureURL, imdbPictureURL, a.movieID\n" +
                "FROM reeldb.movies AS m, reeldb.movie_actors AS a\n" +
                "WHERE m.id = a.movieID AND a.actorName LIKE \"%"+userInput+"%\") AS k;";
                ResultSet rs = stmt.executeQuery(sql); // run the SQL query

                while(rs.next()){
                   //Retrieve by column name
                   String first = rs.getString("title");
                   String second = rs.getString("year");
                   String third = rs.getString("rtAudienceScore");
                   String fourth = rs.getString("rtPictureURL");
                   String fifth = rs.getString("imdbPictureURL");
                   model.addRow(new Object[]{first, second, third, fourth, fifth});// adds the result to a row
                }
                rs.close();
                stmt.close();
                jTable2.setModel(model); //apply the data set

                //listen for clicks on image cells to disply images
                jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    int row = jTable2.rowAtPoint(evt.getPoint());
                    int col = jTable2.columnAtPoint(evt.getPoint());
                    try {
                        URL url = new URL((String)jTable2.getModel().getValueAt(row, col));
                        BufferedImage img = ImageIO.read(url);
                        ImageIcon icon = new ImageIcon(img);
                        Image image = icon.getImage(); // transform it 
                        Image newimg = image.getScaledInstance(150, -1,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                        icon = new ImageIcon(newimg);  // transform it back
                        jLabel3.setIcon(icon);
                        jLabel3.setText("");
                    } catch (MalformedURLException ex) {
                        Logger.getLogger(reeldbGUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(reeldbGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            });
            } catch (SQLException ex) {
                Logger.getLogger(reeldbGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    public void  querySix(){
                jTextArea1.setVisible(false);
                String userInput = jTextField1.getText();
                if(userInput.isEmpty()) {
                    userInput = "action";
                }
                String[] columnName = {"Movie","Year", "Rating", "RT Picture","IMDB Picture"}; //set column names for query 1
                DefaultTableModel model = new DefaultTableModel(data, columnName); //definte the model for this query takes in data object & the col names
                //if query fails, the application won't crash
                try {
                Statement stmt = conn.createStatement();
                String sql = "SELECT DISTINCT k.title, k.year, k.rtAudienceScore, k.rtPictureURL, k.imdbPictureURL \n" +
                "FROM(\n" +
                "SELECT m.id, title, year, rtAudienceScore, rtPictureURL, imdbPictureURL, mt.movieID\n" +
                "FROM reeldb.movies AS m, reeldb.movie_tags AS mt, reeldb.tags AS t\n" +
                "WHERE m.id = mt.movieID AND mt.tagID = t.id AND t.value LIKE \"%"+userInput+"%\") AS k ORDER BY k.rtAudienceScore DESC;";
                ResultSet rs = stmt.executeQuery(sql); // run the SQL query

                while(rs.next()){
                   //Retrieve by column name
                   String first = rs.getString("title");
                   String second = rs.getString("year");
                   String third = rs.getString("rtAudienceScore");
                   String fourth = rs.getString("rtPictureURL");
                   String fifth = rs.getString("imdbPictureURL");
                   model.addRow(new Object[]{first, second, third, fourth, fifth});// adds the result to a row
                }
                rs.close();
                stmt.close();
                jTable2.setModel(model); //apply the data set

                //listen for clicks on image cells to disply images
                jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    int row = jTable2.rowAtPoint(evt.getPoint());
                    int col = jTable2.columnAtPoint(evt.getPoint());
                    try {
                        URL url = new URL((String)jTable2.getModel().getValueAt(row, col));
                        BufferedImage img = ImageIO.read(url);
                        ImageIcon icon = new ImageIcon(img);
                        Image image = icon.getImage(); // transform it 
                        Image newimg = image.getScaledInstance(150, -1,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                        icon = new ImageIcon(newimg);  // transform it back
                        jLabel3.setIcon(icon);
                        jLabel3.setText("");
                    } catch (MalformedURLException ex) {
                        Logger.getLogger(reeldbGUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(reeldbGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            });
            } catch (SQLException ex) {
                Logger.getLogger(reeldbGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    public void  queryTen(){
                jTextArea1.setVisible(false);
                String userInput = jTextField1.getText();
                if(userInput.isEmpty()) {
                    userInput = "Catch Me If You Can";
                }
                String[] columnName = {"Tags"}; //set column names for query 10
                DefaultTableModel model = new DefaultTableModel(data, columnName); //definte the model for this query takes in data object & the col names
                //if query fails, the application won't crash
                try {
                Statement stmt = conn.createStatement();
                String sql = "SELECT value\n" +
                "FROM reeldb.movies AS m, reeldb.movie_tags AS mt, reeldb.tags AS t\n" +
                "WHERE m.title LIKE \"%"+userInput+"%\" AND m.ID = mt.movieID AND t.id = mt.tagID";
                ResultSet rs = stmt.executeQuery(sql); // run the SQL query

                while(rs.next()){
                   //Retrieve by column name
                   String first = rs.getString("value");
                   model.addRow(new Object[]{first});// adds the result to a row
                }
                rs.close();
                stmt.close();
                jTable2.setModel(model); //apply the data set
            } catch (SQLException ex) {
                Logger.getLogger(reeldbGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextField2 = new JFormattedTextField(formatter);
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField5 = new JFormattedTextField(formatter);
        jButton5 = new javax.swing.JButton();
        jTextField6 = new JFormattedTextField(formatter);
        jButton6 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(900, 650));
        setMinimumSize(new java.awt.Dimension(900, 650));
        setPreferredSize(new java.awt.Dimension(800, 600));

        jTextField1.setToolTipText("Input search tags here...");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        jLabel1.setText("Search Query:");

        jLabel2.setText("Results:");

        jButton2.setText("See Top # Popular Movies");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Search by Genre and # results");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Search # Popular Directors");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Search by....", "Search by Director name", "Search by Actor name", "Search by tags", "Show all tags for movie", "Search Movies by title" }));
        jComboBox1.setToolTipText("");
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jTextField2.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Movie", "Year", "Director", "Image"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jLabel3.setText("Image");
        jLabel3.setMaximumSize(new java.awt.Dimension(40, 100));

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel4.setText("Genre:");

        jLabel5.setText("#:");

        jTextField5.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jButton5.setText("Search # Popular Actors");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTextField6.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });

        jButton6.setText("User Rating History");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel6.setText("User ID:");

        jTextField7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField7ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setVisible(false);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField1)
                            .addComponent(jLabel2)
                            .addComponent(jComboBox1, 0, 546, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField2))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField5)
                                    .addComponent(jTextField6)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField7)
                                        .addGap(19, 19, 19)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton5)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
            int selected = jComboBox1.getSelectedIndex();
            switch(selected) {
                case 0:
                    
                break;
                case 1:
                queryFour();
                break;
                case 2:
                queryFive();    
                break;
                case 3:
                querySix();    
                break;
                case 4:
                queryTen();    
                break;
                case 5:
                queryTwo();    
                break;
            }
                    
    }//GEN-LAST:event_jButton1ActionPerformed
    /*
    On the button click, launches an SQL query, gets data set, loops through it 
    and builds the model to display in the column JTable. 
    */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
            /*
                Code for Query #1
            */
            jTextArea1.setVisible(false);
            String[] columnName = {"Movie","Year", "Rating", "RT Picture","IMDB Picture"}; //set column names for query 1
            DefaultTableModel model = new DefaultTableModel(data, columnName); //definte the model for this query takes in data object & the col names
            //if query fails, the application won't crash
            try {
            String userInput = jTextField2.getText();//grab user input from text field
            if(userInput.isEmpty()){
                userInput = "10"; //if no user input, run 10 queries by default
            }
            Statement stmt = conn.createStatement();
            String sql = "SELECT DISTINCT title, year, rtAudienceScore, rtAudienceNumRatings, rtPictureURL, imdbPictureURL FROM reeldb.movies ORDER BY rtAudienceScore DESC, rtAudienceNumRatings DESC LIMIT "+userInput;
            ResultSet rs = stmt.executeQuery(sql); // run the SQL query
            
            while(rs.next()){
               //Retrieve by column name
               String first = rs.getString("title");
               String second = rs.getString("year");
               String third = rs.getString("rtAudienceScore");
               String fourth = rs.getString("rtPictureURL");
               String fifth = rs.getString("imdbPictureURL");
               model.addRow(new Object[]{first, second, third, fourth, fifth});// adds the result to a row
            }
            rs.close();
            stmt.close();
            jTable2.setModel(model); //apply the data set
            
            //listen for clicks on image cells to disply images
            jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = jTable2.rowAtPoint(evt.getPoint());
                int col = jTable2.columnAtPoint(evt.getPoint());
                try {
                    URL url = new URL((String)jTable2.getModel().getValueAt(row, col));
                    BufferedImage img = ImageIO.read(url);
                    ImageIcon icon = new ImageIcon(img);
                    Image image = icon.getImage(); // transform it 
                    Image newimg = image.getScaledInstance(150, -1,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                    icon = new ImageIcon(newimg);  // transform it back
                    jLabel3.setIcon(icon);
                    jLabel3.setText("");
                } catch (MalformedURLException ex) {
                    Logger.getLogger(reeldbGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(reeldbGUI.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });
        } catch (SQLException ex) {
            Logger.getLogger(reeldbGUI.class.getName()).log(Level.SEVERE, null, ex);
        }    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
            /*
                Code for Query #3
            */
            jTextArea1.setVisible(false);
            String[] columnName = {"Movie","Year", "Rating", "RT Picture","IMDB Picture", "Genre"}; //set column names for query 1
            DefaultTableModel model = new DefaultTableModel(data, columnName); //definte the model for this query takes in data object & the col names
            //if query fails, the application won't crash
            try {
            String genre = jTextField3.getText();//grab user input from text field
            String num = jTextField4.getText();//grab user input from text field
            if(genre.isEmpty()){
                genre = "horror"; //if no user input, run 10 queries by default
            }
            if(num.isEmpty()){
                num = "10"; //if no user input, run 10 queries by default
            }
            Statement stmt = conn.createStatement();
            String sql = "SELECT m.id, title, year, rtAudienceScore, rtPictureURL, imdbPictureURL, g.genre" +
            " FROM reeldb.movies AS m, reeldb.movie_genres AS g\n" +
            " WHERE m.id = g.movieID AND g.genre LIKE '%"+genre+"%' "+
            " ORDER BY rtAudienceScore DESC LIMIT "+num;
            ResultSet rs = stmt.executeQuery(sql); // run the SQL query
            
            while(rs.next()){
               //Retrieve by column name
               String first = rs.getString("title");
               String second = rs.getString("year");
               String third = rs.getString("rtAudienceScore");
               String fourth = rs.getString("rtPictureURL");
               String fifth = rs.getString("imdbPictureURL");
               String sixth = rs.getString("g.genre");
               model.addRow(new Object[]{first, second, third, fourth, fifth, sixth});// adds the result to a row
            }
            rs.close();
            stmt.close();
            jTable2.setModel(model); //apply the data set
            
            //listen for clicks on image cells to disply images
            jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = jTable2.rowAtPoint(evt.getPoint());
                int col = jTable2.columnAtPoint(evt.getPoint());
                try {
                    URL url = new URL((String)jTable2.getModel().getValueAt(row, col));
                    BufferedImage img = ImageIO.read(url);
                    ImageIcon icon = new ImageIcon(img);
                    Image image = icon.getImage(); // transform it 
                    Image newimg = image.getScaledInstance(150, -1,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                    icon = new ImageIcon(newimg);  // transform it back
                    jLabel3.setIcon(icon);
                    jLabel3.setText("");
                } catch (MalformedURLException ex) {
                    Logger.getLogger(reeldbGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(reeldbGUI.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });
        } catch (SQLException ex) {
            Logger.getLogger(reeldbGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
            /*
                Code for Query #7
            */
            jTextArea1.setVisible(false);
            String[] columnName = {"Movie Directed","AVG Score"}; //set column names for query 1
            DefaultTableModel model = new DefaultTableModel(data, columnName); //definte the model for this query takes in data object & the col names
            //if query fails, the application won't crash
            try {
            String numMovies = jTextField5.getText();//grab user input from text field
            if(numMovies.isEmpty()){
                numMovies = "10"; //if no user input, run 10 queries by default
            }
            Statement stmt = conn.createStatement();
            String sql = "    SELECT DISTINCT d.directorName, AVG(m.rtAudienceScore) \n" +
            "FROM reeldb.movies AS m, reeldb.movie_directors AS d\n" +
            "WHERE m.id = d.movieID\n" +
            "GROUP BY d.directorName\n" +
            "HAVING COUNT(*)> "+numMovies+" \n" +
            "ORDER BY AVG(m.rtAudienceScore) DESC LIMIT 10";
            ResultSet rs = stmt.executeQuery(sql); // run the SQL query
            
            while(rs.next()){
               //Retrieve by column name
               String first = rs.getString("d.directorName");
               String second = rs.getString("AVG(m.rtAudienceScore)");
               model.addRow(new Object[]{first, second});// adds the result to a row
            }
            rs.close();
            stmt.close();
            jTable2.setModel(model); //apply the data set
            
        } catch (SQLException ex) {
            Logger.getLogger(reeldbGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
            /*
                Code for Query #8
            */
            jTextArea1.setVisible(false); 
            String[] columnName = {"Actor Name","AVG Score"}; //set column names for query 8
            DefaultTableModel model = new DefaultTableModel(data, columnName); //definte the model for this query takes in data object & the col names
            //if query fails, the application won't crash
            try {
            String numMovies = jTextField6.getText();//grab user input from text field
            if(numMovies.isEmpty()){
                numMovies = "10"; //if no user input, run 10 queries by default
            }
            Statement stmt = conn.createStatement();
            String sql = "SELECT DISTINCT ma.actorName, avg(m.rtAudienceScore) \n" +
            "FROM reeldb.movie_actors AS ma, reeldb.movies AS m \n" +
            "WHERE ma.movieID = m.id \n" +
            "GROUP BY ma.actorName \n" +
            "HAVING count(*) > "+numMovies+" \n" +
            "ORDER BY AVG(m.rtAudienceScore) DESC LIMIT 10";
            ResultSet rs = stmt.executeQuery(sql); // run the SQL query
            
            while(rs.next()){
               //Retrieve by column name
               String first = rs.getString("ma.actorName");
               String second = rs.getString("avg(m.rtAudienceScore)");
               model.addRow(new Object[]{first, second});// adds the result to a row
            }
            rs.close();
            stmt.close();
            jTable2.setModel(model); //apply the data set
            
        } catch (SQLException ex) {
            Logger.getLogger(reeldbGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed

    private void jTextField7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
            /*
                Code for Query #9
            */
            jTextArea1.setVisible(false);
            String[] columnName = {"Movie Title","Ratings","Date"}; //set column names for query 8
            DefaultTableModel model = new DefaultTableModel(data, columnName); //definte the model for this query takes in data object & the col names
            //if query fails, the application won't crash
            try {
            String userId = jTextField7.getText();//grab user input from text field
            if(userId.isEmpty()){
                userId = "75"; //if no user input, run 10 queries by default
            }
            Statement stmt = conn.createStatement();
            String sql = "SELECT user_ratedmovies.userID, user_ratedmovies.rating, title, "
                    + "CONCAT(date_month, '-', date_day, '-', date_year, ' ', date_hour, ':', date_minute, ':',"
                    + " date_second) FROM user_ratedmovies JOIN movies ON movies.id = user_ratedmovies.movieID "
                    + "WHERE user_ratedmovies.userID = "+userId+" GROUP BY movieID ORDER BY date_year, date_month, date_day, "
                    + "date_hour, date_minute, date_second";
            ResultSet rs = stmt.executeQuery(sql); // run the SQL query
            
            while(rs.next()){
               //Retrieve by column name
               String first = rs.getString("title");
               String second = rs.getString("user_ratedmovies.rating");
               String third = rs.getString("CONCAT(date_month, '-', date_day, '-', date_year, ' ', date_hour, ':', date_minute, ':',"
                    + " date_second)");
               model.addRow(new Object[]{first, second,third});// adds the result to a row
            }
            String sql2 = "SELECT genre, TRUNCATE(((COUNT(*)/(SELECT COUNT(DISTINCT movieID) "
                    + "FROM user_ratedmovies_timestamps WHERE userID = "+userId+")) * 100), 2) "
                    + "FROM user_ratedmovies_timestamps "
                    + "JOIN movie_genres ON movie_genres.movieID = user_ratedmovies_timestamps.movieID "
                    + "WHERE userID = "+userId+" GROUP BY genre;";
            ResultSet rs2 = stmt.executeQuery(sql2); // run the SQL query
            List  colData = new ArrayList<>();
            List colData2 = new ArrayList<>();

            while(rs2.next()){
               //Retrieve by column name
               String first = rs2.getString("genre");
               colData.add(first);
               String second = rs2.getString("TRUNCATE(((COUNT(*)/(SELECT COUNT(DISTINCT movieID) FROM user_ratedmovies_timestamps WHERE userID = "+userId+")) * 100), 2)");
               colData2.add(second);
            }
            model.addColumn("Genre", colData.toArray());
            model.addColumn("AVG Rating", colData2.toArray());

            rs.close();
            rs2.close();
            stmt.close();
            jTable2.setModel(model); //apply the data set   
            } catch (SQLException ex) {
            Logger.getLogger(reeldbGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])  {
        System.out.println("Trying to connect to the database...");
        try {
            Class.forName("com.mysql.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/reeldb?useServerPrepStmts=false&rewriteBatchedStatements=true", "root", "Rootadmin$12");
            //Creates a formatter to allow only number input in certain textfields
            NumberFormat longFormat = NumberFormat.getIntegerInstance();
            formatter = new NumberFormatter(longFormat);
            formatter.setValueClass(Integer.class);
            formatter.setAllowsInvalid(false);
            
            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new reeldbGUI().setVisible(true);
                }
            });
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(reeldbGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(reeldbGUI.class.getName()).log(Level.SEVERE, null, ex);
            System.out.printf("No connection to database..");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    // End of variables declaration//GEN-END:variables
}

